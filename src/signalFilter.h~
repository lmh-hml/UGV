#ifndef SIGNALFILTER_H
#define SIGNALFILTER_H

#include <ros/ros.h>
#include <fyp/Int16Array.h>
#include <array>

/*
The header file for Signal-filter node
Function:
	-Subscribes to Int16Array msg under topic "ultrasonic"
	-Publishes a Int16Array msg under topic "filteredArray" 
	-Stores up to a maximum of 10, then discards oldest data as new one come in
	-Self-updating, should publish a new msg everytime new data from ultrasonic sensors is recieved

*/

class SigFilter
{
    public:

        SigFilter();

        std::array< fyp::Int16Array, 10 > buffer;
        int head, tail, size;
        const int MAX;
        fyp::Int16Array msg;

        void increment(int& index);
        void insertData(const fyp::Int16Array& data);
        void removeData();
        fyp::Int16Array filter();

        ros::NodeHandle nh;
        ros::Subscriber listener;
        ros::Publisher  Array_pub;
        void collectArray(const fyp::Int16Array::ConstPtr& array);

};

SigFilter::SigFilter():head(0), tail(0),size(0), MAX(10){

    listener=nh.subscribe<fyp::Int16Array>("ultrasonicArray",10,&SigFilter::collectArray,this);
    Array_pub=nh.advertise<fyp::Int16Array>("filteredArray",1);

}




#endif
